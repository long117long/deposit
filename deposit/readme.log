2020-12-15 版本号：4.0.1
1.Deposit代码结构拆分，分为：core, service, use 三个部分。
  其中core，是deposit的核心代码： DepositBinderProxy 和 DepositBinderService；
           DepositBinderProxy是 代理调用端核心类，将interface转成可以使用的接口调用类；
           DepositBinderService是 代理服务端核心类；将实现interface的类转成Binder类；

  service，主要是提供了ContentProvider相关注册和获取 DepositBinderService的功能；
           应用集成后可以不用关心DepositBinderService的发布问题；

  use， 主要是提供了通过接口使用service的相关接口；

2. 使用时，可以只集成core；这样，应用自己管理Binder和使用Binder的Proxy；
    也可以集成service；这样应用不用关注功能类的发布细节和获取细节；

3. 如果只集成core，使用方法：
↓----------------------------------------------------------------------------------------------
    a. 定义的接口类，
        public interface IFun {
                byte[] genRandom(int len);
            }
    b. 实现接口：
        public class FunImpl implements IFun{
            @Override
            public byte[] genRandom(int len) {
                if (len <= 0){
                    return null;
                }
                SecureRandom random = new SecureRandom();
                byte[] result = new byte[len];
                random.nextBytes(result);
                return result;
            }
        }
    c. 生成一个这个FunImpl的Binder:
         FunImpl fun = new FunImpl();
         DepositBinderService binderService = new DepositBinderService(context,fun,IFun.class);
         IBinder binder = binderService.asBinder();
    d. 通过binder，生成一个proxy使用类：
         DepositBinderProxy<IFun> proxy = new DepositBinderProxy(context,IFun.class,IDeposit.Stub.asInterface(binder));
         IFun iFun = proxy.genProxy();
         byte[] random = iFun.genRandom(10);
↑----------------------------------------------------------------------------------------------


//=================================================================================================

2020-3-21 版本号：3.1.0
1. 在代码中添加清除不再使用的参数代理的相关功能;


2020-1-20 版本号：3.0.1
1. 支持在client端的接口中传到service端一个interface类；
   利用这个功能可以在client注册一个回调实例到service端，这样的话service端也可以回调到client端了。

2020-1-8 版本号: 2.0.1
1. 配合服务端2.0.1 使用

2020-1-2 版本号：1.0.1
1. 第一版正式jar。

//↓==================================================================================================================↓
   使用方式为：
    a. 服务端定义的接口类，
        public interface IFun {
                byte[] genRandom(int len);
            }
     b. 创建接口代理
     IFun iFun = new DepositProxy.Builder()
                    //设置远程服务所在的apk的包名.注意：如果远程服务和此类是在同一个apk中，此方法可以不用调用。
                    .setPkgName("com.zxl.app_deposit_service")
                    //设置在服务实现类使用注解@ServiceName时的名字。如果服务实现类没有使用注解@ServiceName，此方法可以不用调用。
                    .setServiceName("FunImpl")
                    //设置Context。此方法必须调用
                    .setContext(getApplicationContext())
                    //创建接口类代理
                    .create(IFun.class);
     c. 使用接口类代理
        byte[] random = iFun.genRandom(16);
//↑==================================================================================================================↑
